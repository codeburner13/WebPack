#!/usr/bin/env node
const chalk = require('chalk');
const child_process = require('child_process'); // eslint-disable-line camelcase
const fs = require('fs');
const path = require('path');
const program = require('commander');
const ownPackage = require('./package.json');

const { exec, spawn } = child_process; // eslint-disable-line camelcase

const parentCwd = fs.realpathSync(process.cwd());

const throwError = msg => {
  console.log(chalk.red(msg));
  process.exit(1);
};

const getErrorMessage = type => {
  switch (type) {
    case 'arguments':
      return `
Required arguments missing.
Type ${chalk.green('webpack-bundle-analyser --help build')} for more info.`;

    case 'copy':
      return `
Could not locate data file at ${chalk.bold(program.D)}. Are you sure it exists?`;

    default:
      return '';
  }
};

const getTempConfigTarget = () => path.join(__dirname, 'config/webpack.temp.json');

const writeTempConfig = options => {
  const raw = {
    TITLE: options.title,
  };
  const stringified = Object.keys(raw).reduce((env, key) => {
    env[key] = JSON.stringify(raw[key]);
    return env;
  }, {});
  const config = {
    environment: 'production',
    output: path.join(parentCwd, options.output),
    env: {
      stringified,
    },
    data: path.join(parentCwd, options.data),
    logo: options.logo ? path.join(parentCwd, options.logo) : '',
  };

  const contents = JSON.stringify(config, null, 2);
  fs.writeFile(getTempConfigTarget(), contents, err => {
    if (err) throwError(err);
  });
};

const unlinkTempConfig = () => {
  fs.unlink(getTempConfigTarget(), err => {
    if (err) throwError(err);
  });
};

const removeDataFromSrc = () => {
  const child = exec(`rm ${path.join('src', 'data.json')}`, {
    cwd: __dirname,
  }, err => {
    if (err) throwError(err);
    child.kill('SIGINT');
  });
};

const build = options => {
  console.log('[Webpack Bundle Analyser]', chalk.green('Preparing your bundle report...'));
  writeTempConfig(options);

  const ls = spawn('yarn', ['start-webpack'], { cwd: __dirname });
  ls.on('exit', code => {
    unlinkTempConfig();
    removeDataFromSrc();
    if (code !== 0) throwError(`Proces exited with code ${code}.`);
    console.log('[Webpack Bundle Analyser]', chalk.green('Report ready!'));
    console.log(`You can find it in ${chalk.bold(path.join(parentCwd, options.output))}`);
    ls.kill('SIGINT');
  });
};

const checkArgs = (task, prog) => {
  switch (task) {
    case 'build':
      return Boolean(prog.O && prog.D);

    default:
      return true;
  }
};

const getRemoteConfig = () => {
  try {
    const bundle = require(path.join(process.cwd(), 'package.json')); // eslint-disable-line global-require
    return bundle.webpackAnalyse;
  }
  catch (err) {
    throwError(err);
    return false;
  }
};

const checkRemoteConfig = (task, prog) => {
  const config = getRemoteConfig();

  if (!config) return;

  switch (task) {
    case 'build': {
      if (config.logo) prog.L = config.logo;
      if (config.title) prog.T = config.title;
      break;
    }

    default:
      break;
  }
};

const moveDataToSrc = data => {
  const child = exec(`cp ${data} ${path.join(__dirname, 'src', 'data.json')}`, {
    cwd: process.cwd(),
  }, err => {
    if (err) throwError(getErrorMessage('copy'));
    child.kill('SIGINT');
  });
};

const runCommand = () => {
  program
    .arguments('<task>')
    .option('-o <output>', 'Path to output directory.')
    .option('-d <data>', 'Path to stats JSON file.')
    .action(task => {
      switch (task) {
        case 'build': {
          checkRemoteConfig(task, program);

          if (!checkArgs(task, program)) {
            throwError(getErrorMessage('arguments'));
          }

          moveDataToSrc(program.D);

          return build({
            data: program.D,
            logo: program.L,
            output: program.O,
            title: program.T,
          });
        }

        default:
          return throwError(`Invalid command "${task}"`);
      }
    })
    .version(ownPackage.version, '-v, --version');

  program.parse(process.argv);
};

runCommand();
