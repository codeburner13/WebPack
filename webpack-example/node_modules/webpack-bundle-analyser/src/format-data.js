export const mapChunks = {};
export const mapModules = {};
export const mapModulesIdent = {};
export const mapModulesUid = {};

export default stats => {
  stats.assets = stats.assets || [];
  stats.assets.sort((a, b) => b.size - a.size);

  stats.modules.sort((a, b) => a.id - b.id);
  stats.modules.forEach((module, idx) => {
    mapModules[module.id] = module;
    mapModulesIdent[`$${module.identifier}`] = module;
    mapModulesUid[module.uid = idx] = module;
    module.dependencies = [];
  });

  stats.chunks = stats.chunks || [];
  stats.chunks.forEach(chunk => {
    mapChunks[chunk.id] = chunk;
    chunk.children = [];
  });

  stats.modules.forEach(module => {
    module.reasons = module.reasons || [];
    module.reasons.forEach(reason => {
      const m = mapModulesIdent[`$${reason.moduleIdentifier}`];
      if (!m) return;
      reason.moduleUid = m.uid;
      m.dependencies.push({
        type: reason.type,
        moduleId: module.id,
        moduleUid: module.uid,
        module: module.name,
        userRequest: reason.userRequest,
        loc: reason.loc,
      });
    });

    module.issuerUid = mapModulesIdent[`$${module.issuer}`] && mapModulesIdent[`$${module.issuer}`].uid;
    (function setTimestamp(module) { // eslint-disable-line
      if (typeof module.timestamp === 'number') {
        return module.timestamp;
      }

      if (!module.profile) return; // eslint-disable-line

      const factory = module.profile.factory || 0;
      const building = module.profile.building || 0;

      module.time = factory + building;

      if (!module.issuer) {
        return module.timestamp = module.time;
      }

      const issuer = mapModulesIdent[`$${module.issuer}`];

      if (!issuer) {
        return module.timestamp = NaN;
      }

      setTimestamp(issuer);
      module.timestamp = issuer.timestamp + module.time;
    }(module));
  });

  stats.chunks.forEach(chunk => {
    chunk.parents.forEach(parent => {
      const c = mapChunks[parent];
      c.children.push(chunk.id);
    });

    chunk.origins.forEach(origin => {
      const m = mapModulesIdent[`$${origin.moduleIdentifier}`];
      if (!m) return;
      origin.moduleUid = m.uid;
    });
  });

  stats.modules.forEach(module => {
    module.dependencies.sort((a, b) => {
      if (!a.loc && !b.loc) return 0;
      if (!a.loc) return 1;
      if (!b.loc) return -1;
      a = a.loc.split(/[:-]/);
      b = b.loc.split(/[:-]/);
      if (+a[0] < +b[0]) return -1;
      if (+a[0] > +b[0]) return 1;
      if (+a[1] < +b[1]) return -1;
      if (+a[1] > +b[1]) return 1;
      return 0;
    });
  });

  let maxLength = 0;
  stats.assets.forEach(a => {
    if (a.name.length > maxLength) {
      maxLength = a.name.length;
    }
  });

  stats.assets.forEach(a => {
    a.normalizedName = a.name;
    while (a.normalizedName.length < maxLength) {
      a.normalizedName = ` ${a.normalizedName}`;
    }
  });

  stats.assets.sort((a, b) => {
    a = a.normalizedName;
    b = b.normalizedName;
    return a < b ? -1 : 1;
  });
};
