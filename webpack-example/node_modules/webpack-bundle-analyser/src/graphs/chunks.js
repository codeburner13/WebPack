import Sigma from 'sigma';
import { greenRed } from 'percentageToColor';
import stats from 'data.json';

import('sigma/build/plugins/sigma.layout.forceAtlas2.min');

const element = document.getElementById('sigma-chunks');

const nodes = [];
const edges = [];
const chunkCount = stats.chunks.length;
let maxSize = 0;

stats.chunks.forEach(chunk => {
  if (chunk.size > maxSize) {
    maxSize = chunk.size;
  }
});

stats.chunks.forEach((chunk, idx) => {
  const color = greenRed(Math.pow((chunk.size + 1) / (maxSize + 1), 1 / 4)); // eslint-disable-line no-restricted-properties, max-len

  nodes.push({
    id: `chunk${chunk.id}`,
    chunkId: chunk.id,
    size: Math.ceil(Math.sqrt(chunk.size + 1)),
    type: 'webpack',
    shortLabel: String(chunk.id),
    label: `[${chunk.id}] ${chunk.origins.map(o => o.reasons
      .concat(o.name)
      .concat(o.moduleName)
      .join(' ')).join(', ')}`,
    x: (Math.cos(idx / chunkCount * Math.PI * 2) * chunkCount), // eslint-disable-line no-mixed-operators, max-len
    y: (Math.sin(idx / chunkCount * Math.PI * 2) * chunkCount), // eslint-disable-line no-mixed-operators, max-len
    color,
  });
});

stats.chunks.forEach(chunk => {
  chunk.parents.forEach(parent => {
    edges.push({
      id: `edge${chunk.id}-${parent}`,
      source: `chunk${parent}`,
      target: `chunk${chunk.id}`,
      arrow: 'target',
      type: 'arrow',
      size: chunk.parents.length,
    });
  });
});

const s = new Sigma({
  graph: {
    edges,
    nodes,
  },
  renderer: {
    type: 'canvas',
    container: element,
  },
  settings: {
    edgeColor: 'target',
    maxNodeSize: 20,
    minNodeSize: 4,
    maxEdgeSize: 3,
    minEdgeSize: 1,
  },
});

s.bind('clickNode', e => {
  window.location.hash = `#chunk/${e.data.node.chunkId}`;
});

s.refresh();

export const showChunkGraph = () => {
  element.style.display = 'block';
  s.refresh();
  s.startForceAtlas2();
  s.renderers[0].resize();
};

export const hideChunkGraph = () => {
  element.style.display = 'none';
  s.stopForceAtlas2();
};
