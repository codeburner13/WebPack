import findById from 'findById';
import { setTitle } from 'meta';
import { mapModulesUid } from 'format-data';

export default async (render, options) => {
  setTitle('Hints');

  let multiChunks = [];
  let multiRefs = [];

  options.stats.modules.forEach(module => {
    const requiresSum = {};
    module.dependencies.forEach(d => {
      if (!requiresSum[d.moduleId]) {
        requiresSum[d.moduleId] = {
          count: 1,
          module,
          otherModule: findById(options.stats.modules, d.moduleId),
        };
      }
      else {
        requiresSum[d.moduleId].count += 1;
      }
    });

    Object.keys(requiresSum).forEach(id => {
      const item = requiresSum[id];
      if (item.count >= 2) {
        multiRefs.push(item);
      }
    });
  });

  multiRefs.forEach(item => {
    const refModLength = item.otherModule.id.toString().length;
    item.saving = item.count * (2 + refModLength) - 6 - refModLength; // eslint-disable-line no-mixed-operators, max-len
  });

  multiRefs = multiRefs.filter(item => item.saving > 10);
  multiRefs.sort((a, b) => b.saving - a.saving);

  options.stats.modules.forEach(module => {
    if (module.chunks.length >= 2) {
      multiChunks.push({
        count: module.chunks.length,
        module,
        saving: ((module.chunks.length - 1) * module.size),
      });
    }
  });

  multiChunks = multiChunks.filter(item => item.saving > 100);
  multiChunks.sort((a, b) => b.saving - a.saving);

  const modulesByTimestamp = options.stats.modules
    .filter(m => typeof m.timestamp === 'number')
    .sort((a, b) => b.timestamp - a.timestamp)
    .slice(0, 10);

  const longChains = modulesByTimestamp.map(m => {
    const chain = [m];
    while (typeof m.issuerUid === 'number') {
      m = mapModulesUid[m.issuerUid];
      if (!m) break;
      chain.unshift(m);
    }
    return chain;
  });

  const template = await import('./view.jade');
  render(template.default, {
    longChains,
    multiChunks,
    multiRefs,
  });
};
