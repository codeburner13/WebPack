import prepareData from 'format-data';
import data from 'data.json';

import 'bulma/css/bulma.css';
import 'style.css';

let lastHash = '';
let lastPage = '';
let lastPageMethods = {};

const offsetFixedNavbar = () => lastPage !== 'error' ? '<br /><br />' : ''; // eslint-disable-line no-confusing-arrow

const render = (template, vars) => {
  const [page] = document.getElementsByClassName('page');
  if (!page) return;
  page.innerHTML = offsetFixedNavbar() + template(Object.assign({ stats: data }, vars));
};

const loadTemplate = async name => {
  const template = await import(`./views/${name}/index`);
  return template.default;
};

// TODO throw error if no data file found..
const loadPage = async (...args) => {
  let pageBundle;
  let [name] = args;

  if (!name) name = 'home';

  try {
    pageBundle = await loadTemplate(name);
    lastPage = name;
  }
  catch (err) {
    pageBundle = await loadTemplate('error');
    lastPage = 'error';
  }

  if (lastPageMethods.componentWillUnmount) {
    lastPageMethods.componentWillUnmount();
  }

  lastPageMethods = {};

  pageBundle(render, {
    args,
    registerMethod(methodName, fn) {
      if (typeof fn !== 'function') {
        throw new Error(`Method ${methodName} must be a function.`);
      }

      switch (methodName) {
        case 'componentWillUnmount':
          lastPageMethods.componentWillUnmount = fn;
          break;

        default:
          throw new Error(`Method ${methodName} doesn't exist.`);
      }
    },
    stats: data,
  });
};

const setActiveMenuItem = hash => {
  const items = document.getElementsByClassName('navbar-item');

  for (let i = 0; i < items.length; i += 1) {
    const item = items[i];
    const isActive = item.getAttribute('href') === hash;
    if (isActive) {
      item.classList.add('is-active');
    }
    else {
      item.classList.remove('is-active');
    }
  }
};

const loadFromHash = () => {
  loadPage(...window.location.hash.replace(/^#/, '').split('/'));
  setActiveMenuItem(window.location.hash);
};

window.addEventListener('hashchange', () => {
  if (window.location.hash === lastHash) return;
  lastHash = window.location.hash;
  loadFromHash();
}, false);

const attachMenuListener = () => {
  const [burger] = document.getElementsByClassName('navbar-burger');
  if (!burger) return;

  burger.addEventListener('click', () => {
    const { target: id } = burger.dataset;
    const target = document.getElementById(id);
    burger.classList.toggle('is-active');
    target.classList.toggle('is-active');
  });
};

// Enable navbar controls.
document.addEventListener('DOMContentLoaded', () => {
  attachMenuListener();
  loadFromHash();
  prepareData(data);
});

if (module.hot) {
  module.hot.accept();
}
