const CleanWebpackPlugin = require('clean-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const fs = require('fs');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const path = require('path');
const webpack = require('webpack');

let config = {
  env: {
    stringified: {},
  },
};
try {
  config = require('./config/webpack.temp.json'); // eslint-disable-line global-require
}
catch (err) {
  // Temporary config does not exist.
}

if (!process.env.NODE_PATH) process.env.NODE_PATH = '';

const appDir = fs.realpathSync(process.cwd());
const dist = config.output || 'build';
const isProduction = config.environment === 'production';

let copyPaths = [{ from: 'public' }];
if (config.logo) {
  copyPaths = [
    ...copyPaths,
    { from: config.logo },
  ];
}

const devServer = isProduction ? {} : {
  devServer: {
    compress: true,
    contentBase: dist,
    host: '0.0.0.0',
    hot: true,
    inline: false,
    open: true,
    openPage: '../',
    port: 9000,
    publicPath: '/',
    watchContentBase: true,
  },
};

module.exports = Object.assign({
  entry: './src/index.js',
  devtool: isProduction ? 'none' : 'inline-source-map',
  mode: isProduction ? 'production' : 'development',
  output: {
    path: path.resolve(appDir, dist),
    filename: 'bundle.[hash:8].js',
  },
  resolve: {
    modules: [
      'node_modules',
      ...process.env.NODE_PATH.split(path.delimiter).filter(Boolean),
    ],
  },
  module: {
    rules: [
      {
        test: /sigma.*/,
        use: 'imports-loader?this=>window',
      },
      {
        test: /\.css$/,
        use: [
          require.resolve('style-loader'),
          require.resolve('css-loader'),
        ],
      },
      {
        test: /\.jade$/,
        use: [
          require.resolve('jade-loader'),
        ],
      },
    ],
  },
  plugins: [
    new CleanWebpackPlugin([dist], { allowExternal: true }),
    new webpack.DefinePlugin(config.env.stringified),
    new HtmlWebpackPlugin({ template: './public/index.html' }),
    new CopyWebpackPlugin(copyPaths),
    new webpack.NamedModulesPlugin(),
    new webpack.HotModuleReplacementPlugin(),
  ],
}, devServer);
